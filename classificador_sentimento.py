# -*- coding: utf-8 -*-
"""classificador_sentimento.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vpzDRLWrjSSFMuY4YviCwWsbES0Cq4qX

# Hugging Face : NLP (Natural Language Processing) é um campo da inteligência artificial que se concentra na interação entre computadores e humanos por meio da linguagem natural. Envolve o desenvolvimento de algoritmos que permitem que máquinas leiam, interpretem e gerem linguagem de forma que seja compreensível e útil para os humanos.
"""

from transformers import pipeline

classificador_sentimento = pipeline("sentiment-analysis", model="distilbert-base-uncased-finetuned-sst-2-english")

"""* Sentimento Negativo em Inglês
* It didn't meet my expectations at all.
"""

classificador_sentimento("It didn't meet my expectations at all.")

"""* Classificando um sentimento Positivo em Inglês
* I love You
"""

classificador_sentimento("I love You")

"""# Utilizando pysentimiento do Hugging Face"""

# instalando pyssentimiento
! pip install pysentimiento

from pysentimiento import create_analyzer

model_analise_sentimento = create_analyzer(task="sentiment", lang="pt")

# comentario Positivo
model_analise_sentimento.predict('''
Estou super satisfeito com a fritadeira!
Ela é muito fácil de usar e as receitas ficam deliciosas. As batatas fritas saem crocantes e
sem excesso de óleo, o que é perfeito para quem quer uma alimentação mais saudável. Recomendo demais!
''')

# Comentario Neutro
model_analise_sentimento.predict('''
A fritadeira faz o que promete, mas não achei nada de excepcional. Ela cumpre bem o papel,
mas demora um pouco mais para preparar alguns alimentos do que eu esperava. Funciona bem,
mas poderia ser mais rápida.
''')

# comentario Negativo
model_analise_sentimento.predict('''
Péssima experiência com essa fritadeira. O produto esquenta demais e, em algumas vezes,
desligou sozinho no meio do preparo. Além disso, as peças parecem frágeis e já começaram
 a apresentar desgaste em menos de um mês de uso. Não recomendo
''')

"""# Buscando Arquivo csv de resenhas no github

* url: 'https://raw.githubusercontent.com/alura-cursos/hugging_face/refs/heads/main/Dados/resenhas.csv
"""

import pandas as pd

url = 'https://raw.githubusercontent.com/alura-cursos/hugging_face/refs/heads/main/Dados/resenhas.csv'

dados_comentarios = pd.read_csv(url)

dados_comentarios.head()

"""* Analisando os sentimentos"""

resultado_previsao = model_analise_sentimento.predict(dados_comentarios['Resenha'])

resultado_previsao

sentimento = []
for resultado in resultado_previsao:
  sentimento.append(resultado.output)

# criando coluna no DataFrame sentimento
dados_comentarios['Sentimento'] = sentimento

dados_comentarios

"""# Plotando um gráfico de quantidade de resenhas por sentimento"""

import plotly.express as px

df_sentimento = dados_comentarios.groupby('Sentimento').size().reset_index(name='Contagem')

fig = px.bar(df_sentimento, x='Sentimento', y='Contagem', title='Quantidade de Resenhas por Sentimento')
fig.show()

"""# Nuvem de palavras (do inglês "word cloud").
Ela é, basicamente, uma imagem que serve para mostrar as palavras que mais se repetem em um conjunto de textos. Quanto mais vezes uma palavra aparecer, maior será o seu tamanho na figura
"""

import nltk
from nltk.corpus import stopwords

nltk.download('stopwords')
portuguese_stopwords = set(stopwords.words('portuguese'))
portuguese_stopwords

from wordcloud import WordCloud
import matplotlib.pyplot as plt

def nuvem_palavras(texto, coluna_texto, sentimento):
    # Filtrando as resenhas com base no sentimento especificado
    texto_sentimento = texto.query(f"Sentimento == '{sentimento}'")[coluna_texto]

    # Unindo todas as resenhas em uma única string
    texto_unido = " ".join(texto_sentimento)

    # Dividindo o texto em palavras e filtrando com stopwords
    palavras = texto_unido.split()
    palavras_filtradas = [palavra for palavra in palavras if palavra not in portuguese_stopwords]
    texto_filtrado = " ".join(palavras_filtradas)

    # Criando e exibindo a nuvem de palavras
    nuvem_palavras = WordCloud(width=800, height=500, max_words=50).generate(texto_filtrado)
    plt.figure(figsize=(10, 7))
    plt.imshow(nuvem_palavras, interpolation='bilinear')
    plt.axis('off')
    plt.show()

# Executando Nuvens de palvras para comentarios Positivos
nuvem_palavras(dados_comentarios, 'Resenha', 'POS')

# Executando Nuvens de palvras para comentarios Negativos
nuvem_palavras(dados_comentarios, 'Resenha', 'NEG')

# Executando Nuvens de palvras para comentarios Neutro
nuvem_palavras(dados_comentarios, 'Resenha', 'NEU')